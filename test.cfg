[mcu skirt_buttons]  # MCU configuration for skirt buttons
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66118F5D7855136-if00  # Serial port configuration
restart_method: command  # Method to restart the MCU

[neopixel skirt_leds]  # Neopixel LED configuration for the skirt
pin: skirt_buttons: gpio29  # Pin configuration for skirt LEDs
chain_count: 24  # Number of LEDs in the skirt
color_order: GRB  # Color order of the LEDs



[gcode_macro _skirt_vars]  # G-code macro for skirt variables
variable_colors: {  # Define color variables for different states
    "idle" : {"red": 0, "green": 0, "blue" : 0, "white": 0},  # Idle state color
    "not_set" : {"red": 0.987, "green": 0, "blue" : 0, "white": 0},  # Idle state color
    "busy" : {"red" : 0.9394, "green" : 0.9607, "blue" : 0.0196, "white": 0.0},  # Busy state color
    "active" : {"red" : 0, "green": 1, "blue": 0, "white": 0},  # Active state color
    "off" : {"red" : 0, "green" : 0, "blue" : 0, "white": 0}  # Off state color
    }
variable_aliases: {  # Define aliases for button names
    "home" : "button5",  # Alias for home button
    "home x" : "button7",  # Alias for home button
    "home y" : "button8",  # Alias for home button
    "home z" : "button9",  # Alias for home button
    "qgl" : "button6",  # Alias for qgl button
    }
variable_dim_factor: 0.2  # Dim factor for LED brightness
variable_button1_idx:     "1,2"  # LED indices for button 1
variable_button1_state:   "idle"  # Initial state for button 1
variable_button2_idx:     "3,4"  # LED indices for button 2
variable_button2_state:   "idle"  # Initial state for button 2
variable_button3_idx:     "7,8"  # LED indices for button 3
variable_button3_state:   "idle"  # Initial state for button 3
variable_button4_idx:     "9,10"  # LED indices for button 4
variable_button4_state:   "idle"  # Initial state for button 4
variable_button5_idx:     "11,12"  # LED indices for button 5
variable_button5_state:   "idle"  # Initial state for button 5
variable_button6_idx:     "13,14"  # LED indices for button 6
variable_button6_state:   "idle"  # Initial state for button 6
variable_button7_idx:     "15,16"  # LED indices for button 7
variable_button7_state:   "idle"  # Initial state for button 7
variable_button8_idx:     "17,18"  # LED indices for button 8
variable_button8_state:   "idle"  # Initial state for button 8
variable_button9_idx:     "19,20"  # LED indices for button 9
variable_button9_state:   "idle"  # Initial state for button 9
variable_button10_idx:     "21,22"  # LED indices for button 10
variable_button10_state:   "idle"  # Initial state for button 10
variable_button11_idx:     "23,24"  # LED indices for button 11
variable_button11_state:   "idle"  # Initial state for button 11
variable_estop_idx:       "5,6"  # LED indices for emergency stop button
gcode:  # G-code commands

    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables
    {% set _ = skirt_vars.colors["idle"].update(  # Update idle color based on user default color
        {"red" : variable_hw.default_color[0] / 255,  # Update red component
         "green" : variable_hw.default_color[1] / 255,  # Update green component
         "blue" : variable_hw.default_color[2] / 255,  # Update blue component
         "white" : 0}) %}  # Set white component to 0
    SET_GCODE_VARIABLE MACRO=_skirt_vars VARIABLE=colors VALUE="{skirt_vars.colors}"  # Set G-code variable for skirt colors




    

[gcode_macro _SET_SKIRT_LEDS]  # G-code macro to set skirt LEDs
gcode:  # G-code commands
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables
    {% set red = params.RED|default(0)|float %}  # Set red component
    {% set green = params.GREEN|default(0)|float %}  # Set green component
    {% set blue = params.BLUE|default(0)|float %}  # Set blue component
    {% set white = params.WHITE|default(0)|float %}  # Set white component
    {% set idx = (params.IDX|string).split(',') %}  # Split LED indices
    {% set transmit_last = params.TRANSMIT|default(1) %}  # Set transmit last value

    {% set red = red * skirt_vars.dim_factor %}  # Adjust red component with dim factor
    {% set green = green * skirt_vars.dim_factor %}  # Adjust green component with dim factor
    {% set blue = blue * skirt_vars.dim_factor %}  # Adjust blue component with dim factor
    {% set white = white * skirt_vars.dim_factor %}  # Adjust white component with dim factor

    {% for led_index in idx %}  # Iterate through LED indices
        {% set transmit=transmit_last if loop.last else 0 %}  # Set transmit value
        SET_LED LED=skirt_leds RED={red} GREEN={green} BLUE={blue} WHITE={white} INDEX={led_index} TRANSMIT={transmit}  # Set LED color
    {% endfor %}  # End LED iteration

[gcode_macro _SET_SKIRT_LEDS_BY_NAME]
gcode:
    {% set default_color = [0, 0, 255] %}
    {% set leds_name = params.BUTTON %}
    {% set color_name = params.COLOR|string|default("idle") %}
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}

    {% set idx = skirt_vars[leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    {% if color_name == "idle" or color_name not in skirt_vars.colors %}
        {% set color = {"red": default_color[0] / 255, "green": default_color[1] / 255, "blue": default_color[2] / 255, "white": 0} %}
        {% if leds_name == "estop" %}
            {% set color = {"red": 1, "green": 0, "blue": 0, "white": 0} %}
        {% endif %}
    {% else %}
        {% set color = skirt_vars.colors[color_name] %}
    {% endif %}

    _SET_SKIRT_LEDS RED={color.red} GREEN={color.green} BLUE={color.blue} WHITE={color.white} IDX="{idx}" TRANSMIT={transmit}



[gcode_macro _SKIRT_BUTTONS_SET_STATE]  # G-code macro to set skirt button state
gcode:  # G-code commands
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables
    {% set button = params.BUTTON|string %}  # Get button name
    {% set state = params.STATE|default("idle")|string %}  # Get button state
    {% set from = params.FROM|string|default("") %}  # Get previous state

    {% if button in skirt_vars.aliases %}  # Check if button has an alias
        {% set button = skirt_vars.aliases[button] %}  # Update button name with alias
    {% endif %}  # End alias check

    {% if state in skirt_vars.colors %}  # Check if state is in colors
        {% if from != "" %}  # Check if previous state is specified
            {% if skirt_vars[button + "_state"] == from %}  # Check if previous state matches current state
                SET_GCODE_VARIABLE MACRO=_skirt_vars VARIABLE="{button}_state" VALUE="'{state}'"  # Update button state
            {% endif %}  # End previous state check
        {% else %}  # If previous state is not specified
            SET_GCODE_VARIABLE MACRO=_skirt_vars VARIABLE="{button}_state" VALUE="'{state}'"  # Update button state
        {% endif %}  # End previous state specification check
    {% endif %}  # End state check

[gcode_macro _SKIRT_BUTTONS_RESET_STATES]  # G-code macro to reset skirt button states
gcode:  # G-code commands
    {% for i in range(1, 12) %}  # Loop through button indices
        SET_GCODE_VARIABLE MACRO=_skirt_vars VARIABLE="button{i}_state" VALUE="'idle'"  # Reset button state to idle
    {% endfor %}  # End button state reset loop

[gcode_macro _SKIRT_BUTTONS_ON]  # G-code macro to turn on skirt buttons
gcode:  # G-code commands
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables
    {% for i in range(1, 12) %}  # Loop through button indices
        {% if printer.print_stats.state in ("printing", "paused") %}  # Check if printer is printing or paused
            {% set state = "off" %}  # Set state to off
        {% else %}  # If printer is not printing or paused
            {% set state = skirt_vars["button" + i|string + "_state"] %}  # Get button state
        {% endif %}  # End printing/paused check
        _SET_SKIRT_LEDS_BY_NAME BUTTON="button{i}" COLOR={state}  # Set LED color for button
    {% endfor %}  # End button loop
    _SET_SKIRT_LEDS_BY_NAME BUTTON="estop" COLOR="idle"  # Set LED color for emergency stop button

[gcode_macro _SKIRT_BUTTONS_OFF]  # G-code macro to turn off skirt buttons
gcode:  # G-code commands
    {% for i in range(1, 12) %}  # Loop through button indices
        _SET_SKIRT_LEDS_BY_NAME BUTTON="button{i}" COLOR="off"  # Turn off LEDs for button
    {% endfor %}  # End button loop
    _SET_SKIRT_LEDS_BY_NAME BUTTON="estop" COLOR="off"  # Turn off LEDs for emergency stop button

[gcode_macro _INIT_SKIRT_BUTTONS]  # G-code macro to initialize skirt buttons
gcode:  # G-code commands
    {% set user = printer["gcode_macro USER_VARIABLES"] %}  # Set user variables
    {% set color_screen = params.COLOR|default(user.hw.default_color|join(","))|string %}  # Get screen color
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables

    # Split the params into individual colors  # Comment to split color parameters
    {% set color_values = color_screen.split(",") %}  # Split color screen parameters

    {% set color = { "red" : color_values[0]|int / 255,  # Set red component
                     "green" : color_values[1]|int / 255,  # Set green component
                     "blue" : color_values[2]|int / 255} %}  # Set blue component

    _skirt_vars  # Initialize skirt variables

    {% for i in range(1, 12) %}  # Loop through button indices
        _SKIRT_BUTTONS_SET_STATE BUTTON="button{i}" STATE="idle"  # Set button state to idle
    {% endfor %}  # End button loop
    _SKIRT_BUTTONS_ON  # Turn on skirt buttons

[gcode_macro _SKIRT_BUTTONS_HANDLER]  # G-code macro to handle skirt button events
gcode:  # G-code commands
    {% set skirt_vars = printer["gcode_macro _skirt_vars"] %}  # Set skirt variables
    {% set button = params.BUTTON|string %}  # Get button name
    
    {% if printer.print_stats.state != "printing" %}  # Check if printer is not printing
        {% if button in skirt_vars.aliases %}  # Check if button has an alias
            {% set button = skirt_vars.aliases[button] %}  # Update button name with alias
        {% endif %}  # End alias check

        {% set action = "_SKIRT_BUTTONS_ACTION_" + button|upper %}  # Set action name

        {% if "gcode_macro " + action in printer %}  # Check if action exists
            _SKIRT_BUTTONS_SET_STATE BUTTON={button} STATE="busy"  # Set button state to busy
            _SKIRT_BUTTONS_ON  # Turn on skirt buttons
            {action}  # Execute action
            _SKIRT_BUTTONS_SET_STATE BUTTON={button} FROM="busy" STATE="idle"  # Set button state to idle
            _SKIRT_BUTTONS_ON  # Turn on skirt buttons
        {% endif %}  # End action check
    {% endif %}  # End printing check

[gcode_button button1]  # G-code button configuration for button 1
pin: ^!skirt_buttons: gpio2  # Pin configuration for button 1
press_gcode:  # G-code to execute when button 1 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button1"  # Handle button press for button 1

[gcode_button button2]  # G-code button configuration for button 2
pin: ^!skirt_buttons: gpio3  # Pin configuration for button 2
press_gcode:  # G-code to execute when button 2 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button2"  # Handle button press for button 2

[gcode_button button3]  # G-code button configuration for button 3
pin: ^!skirt_buttons: gpio5  # Pin configuration for button 3
press_gcode:  # G-code to execute when button 3 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button3"  # Handle button press for button 3

[gcode_button estop]  # G-code button configuration for emergency stop button
pin: ^!skirt_buttons: gpio4  # Pin configuration for emergency stop button
press_gcode:  # G-code to execute when emergency stop button is pressed
    {action_emergency_stop("EStop Button")}  # Execute emergency stop action

[gcode_button button4]  # G-code button configuration for button 4
pin: ^!skirt_buttons: gpio6  # Pin configuration for button 4
press_gcode:  # G-code to execute when button 4 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button4"  # Handle button press for button 4

[gcode_button button5]  # G-code button configuration for button 5
pin: ^!skirt_buttons: gpio7  # Pin configuration for button 5
press_gcode:  # G-code to execute when button 5 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button5"  # Handle button press for button 5

[gcode_button button6]  # G-code button configuration for button 6
pin: ^!skirt_buttons: gpio8  # Pin configuration for button 6
press_gcode:  # G-code to execute when button 6 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button6"  # Handle button press for button 6

[gcode_button button7]  # G-code button configuration for button 7
pin: ^!skirt_buttons: gpio9  # Pin configuration for button 7
press_gcode:  # G-code to execute when button 7 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button7"  # Handle button press for button 7

[gcode_button button8]  # G-code button configuration for button 8
pin: ^!skirt_buttons: gpio10  # Pin configuration for button 8
press_gcode:  # G-code to execute when button 8 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button8"  # Handle button press for button 8

[gcode_button button9]  # G-code button configuration for button 9
pin: ^!skirt_buttons: gpio11  # Pin configuration for button 9
press_gcode:  # G-code to execute when button 9 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button9"  # Handle button press for button 9

[gcode_button button10]  # G-code button configuration for button 10
pin: ^!skirt_buttons: gpio12  # Pin configuration for button 10
press_gcode:  # G-code to execute when button 10 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button10"  # Handle button press for button 10

[gcode_button button11]  # G-code button configuration for button 11
pin: ^!skirt_buttons: gpio13  # Pin configuration for button 11
press_gcode:  # G-code to execute when button 11 is pressed
    _SKIRT_BUTTONS_HANDLER BUTTON="button11"  # Handle button press for button 11
